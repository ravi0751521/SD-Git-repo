---
  - name: Provision an EC2 Instance
    hosts: local
    connection: local
    gather_facts: False
    tags: provisioning
    # Necessary Variables for creating/provisioning the EC2 Instance
    vars:
      instance_type: t1.micro
      security_group: testserver # Change the security group name here
      image: ami-xxxxxxxx # Change the AMI, from which you want to launch the server
      region: us-east-1 # Change the Region
      keypair: ansible # Change the keypair name
      count: 1
      dest_location: /etc/ass-java
      aws_packages_bucket: myjava-bucket

    # Task that will be used to Launch/Create an EC2 Instance
    tasks:

      - name: Create a security group
        local_action: 
          module: ec2_group
          name: "{{ security_group }}"
          description: Security Group for webserver Servers
          region: "{{ region }}"
          rules:
            - proto: tcp
              type: ssh
              from_port: 22
              to_port: 22
              cidr_ip: 0.0.0.0/0
            - proto: tcp
              from_port: 80
              to_port: 80
              cidr_ip: 0.0.0.0/0
          rules_egress:
            - proto: all
              type: all
              cidr_ip: 0.0.0.0/0


      - name: Launch the new EC2 Instance
        local_action: ec2 
                      group={{ security_group }} 
                      instance_type={{ instance_type}} 
                      image={{ image }} 
                      wait=true 
                      region={{ region }} 
                      keypair={{ keypair }}
                      count={{count}}
        register: ec2

      - name: Add the newly created EC2 instance(s) to the local host group (located inside the directory)
        local_action: lineinfile 
                      dest="./hosts" 
                      regexp={{ item.public_ip }} 
                      insertafter="[webserver]" line={{ item.public_ip }}
        with_items: "{{ ec2.instances }}"


      - name: Wait for SSH to come up
        local_action: wait_for 
                      host={{ item.public_ip }} 
                      port=22 
                      state=started
        with_items: "{{ ec2.instances }}"

      - name: install the Amazon corretto-11
        get_url: 
          url: java-11-amazon-corretto-devel-11.0.4.11-1.x86_64.rpm
          dest: "{{destlocation}}"
          mode: '0440'
  #- name: install nginx rpm from a local file
  # yum:
  # name: java-11-amazon-corretto-devel-11.0.4.11-1.x86_64.rpm
  # state: present
      
      -name: copy the java-application arttifact(.war/.jar) to dest dirrctory
       copy:
         src: /home/user
         des: "{{dest_location}}"
      -name: copy the logs from java application to s3 bucket
       s3:
         aws_access_key: "{{ lookup('env','aws_key') }}"
         aws_secret_key: "{{ lookup('env','aws_secret') }}"
         bucket: "{{ aws_packages_bucket }}"
         object: "home/.java/deployment/log"
         dest: "/java/log.tar.gz"
         mode: get
         overwrite: no
      -name: encryption
       s3_bucket:
        name: myjava-bucket
        policy: "{{ lookup('template', '{{ myjava-bucket }}' )}}"
        state: present
        region: us-west-1a
        encrypt: Yes
       

          
